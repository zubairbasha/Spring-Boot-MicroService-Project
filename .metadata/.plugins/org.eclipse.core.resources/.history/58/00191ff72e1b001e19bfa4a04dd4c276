package com.employeeservice.service.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.employeeservice.client.Deparmentclientservice;
import com.employeeservice.client.OrganisationClientService;
import com.employeeservice.dto.DepartmentDto;
import com.employeeservice.dto.EmployeeDeparmentDto;
import com.employeeservice.dto.EmployeeDto;
import com.employeeservice.dto.OrganisationDto;
import com.employeeservice.entity.Employee;
import com.employeeservice.mapper.EmployeeMapper;
import com.employeeservice.repository.EmployeeRepository;
import com.employeeservice.service.EmployeeService;

import io.github.resilience4j.retry.annotation.Retry;
import lombok.extern.log4j.Log4j2;

@Service
@Log4j2
public class EmployeeServiceImpl implements EmployeeService {
	@Autowired
	private EmployeeRepository employeeRepository;
//	@Autowired
//	private RestTemplate restTemplate;
//	@Autowired
//	private WebClient webClient;
	@Autowired
	private Deparmentclientservice departmentService;
	@Autowired
	private OrganisationClientService organisationService;
	@Override
	public EmployeeDto saveEmployee(EmployeeDto employeeDto) {
		System.out.println(employeeDto);
		Employee employee=EmployeeMapper.mapToEmployee(employeeDto);
		Employee savedEmployee=employeeRepository.save(employee);
		
		return EmployeeMapper.mapToEmployeeDto(savedEmployee);
	}

	@Override
//	@CircuitBreaker(name = "${spring.application.name}",fallbackMethod = "getDefaultFallBack")
	@Retry(name="${spring.application.name}",fallbackMethod = "getDefaultFallBack")
	public EmployeeDeparmentDto getEmployeeById(Long id) {
		log.info("Inside getEmployeeById()");
		Employee employee=employeeRepository.findById(id).get();
//		DepartmentDto department= restTemplate.getForObject("http://localhost:9091/api/department/getdepartment/"+employee.getDepartmentCode(), 
//				DepartmentDto.class);
//		DepartmentDto department =
//				webClient.get().uri("http://localhost:9091/api/department/getdepartment/"+
//						employee.getDepartmentCode())
//			.retrieve()
//			.bodyToMono(DepartmentDto.class)
//			.block();
		DepartmentDto department=departmentService.getDepartment(employee.getDepartmentCode());
		OrganisationDto organisationDto=organisationService.getOrganisation(employee.getOrganisationCode());		
		EmployeeDto employeeDto=EmployeeMapper.mapToEmployeeDto(employee);
		return EmployeeDeparmentDto.builder()
				.departmentDto(department)
				.employeeDto(employeeDto)
				.organisationDto(organisationDto)
				.build();
	}
	
	public EmployeeDeparmentDto getDefaultFallBack(Long id,Throwable th) {
		log.info("Inside getDefaultFallBack()");
		Employee employee=employeeRepository.findById(id).get();
//		DepartmentDto department= restTemplate.getForObject("http://localhost:9091/api/department/getdepartment/"+employee.getDepartmentCode(), 
//				DepartmentDto.class);
//		DepartmentDto department =
//				webClient.get().uri("http://localhost:9091/api/department/getdepartment/"+
//						employee.getDepartmentCode())
//			.retrieve()
//			.bodyToMono(DepartmentDto.class)
//			.block();
		DepartmentDto department=DepartmentDto.builder()
				.departmentCode("SERVICE IS UNAVAILABLE")
				.departmentDescription("SERVICE IS UNAVAIABLE")
				.departmentName("SERVICE IS UNAVAILABLE")
				.build();
				
		EmployeeDto employeeDto=EmployeeMapper.mapToEmployeeDto(employee);
		return EmployeeDeparmentDto.builder()
				.departmentDto(department)
				.employeeDto(employeeDto)
				.build();
	}
}
